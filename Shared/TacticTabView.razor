@inject GitHubQueryService IssuesService
<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="AspNetCore" Icon="@notifications.AspNetCore">
            <GridList OrgName="aspnet" RepoName="AspNetCore" Label="@Label" IsOpen="@IsOpenOnly" EnableApproval="@EnableApproval" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="AspNetCore-Tooling" Icon="@notifications.AspNetCoreTooling">
            <GridList OrgName="aspnet" RepoName="AspNetCore-Tooling" Label="@Label" IsOpen="@IsOpenOnly" EnableApproval="@EnableApproval" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Extensions" Icon="@notifications.Extensions">
            <GridList OrgName="aspnet" RepoName="Extensions" Label="@Label" IsOpen="@IsOpenOnly" EnableApproval="@EnableApproval" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Runtime" Icon="@notifications.Runtime">
            <GridList OrgName="dotnet" RepoName="runtime" Label="@Label" IsOpen="@IsOpenOnly" EnableApproval="@EnableApproval" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="CoreCLR" Icon="@notifications.CoreClr">
            <GridList OrgName="dotnet" RepoName="CoreCLR" Label="@Label" IsOpen="@IsOpenOnly" EnableApproval="@EnableApproval" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="CoreFX" Icon="@notifications.CoreFx">
            <GridList OrgName="dotnet" RepoName="Corefx" Label="@Label" IsOpen="@IsOpenOnly" EnableApproval="@EnableApproval" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Setup" Icon="@notifications.CoreSetup">
            <GridList OrgName="dotnet" RepoName="core-setup" Label="@Label" IsOpen="@IsOpenOnly" EnableApproval="@EnableApproval" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="CLI" Icon="@notifications.Cli">
            <GridList OrgName="dotnet" RepoName="cli" Label="@Label" IsOpen="@IsOpenOnly" EnableApproval="@EnableApproval" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="SDK" Icon="@notifications.Sdk">
            <GridList OrgName="dotnet" RepoName="sdk" Label="@Label" IsOpen="@IsOpenOnly" EnableApproval="@EnableApproval" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="MSBuild" Icon="@notifications.MsBuild">
            <GridList OrgName="microsoft" RepoName="msbuild" Label="@Label" IsOpen="@IsOpenOnly" EnableApproval="@EnableApproval" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="EF" Icon="@notifications.Ef">
            <GridList OrgName="aspnet" RepoName="EntityFrameworkCore" Label="@Label" IsOpen="@IsOpenOnly" EnableApproval="@EnableApproval" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="WCF" Icon="@notifications.Wcf">
            <GridList OrgName="dotnet" RepoName="wcf" Label="@Label" IsOpen="@IsOpenOnly" EnableApproval="@EnableApproval" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="WPF" Icon="@notifications.Wpf">
            <GridList OrgName="dotnet" RepoName="wpf" Label="@Label" IsOpen="@IsOpenOnly" EnableApproval="@EnableApproval" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="WinForms" Icon="@notifications.WinForms">
            <GridList OrgName="dotnet" RepoName="winforms" Label="@Label" IsOpen="@IsOpenOnly" EnableApproval="@EnableApproval" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="WebSDK" Icon="@notifications.WebSdk">
            <GridList OrgName="aspnet" RepoName="websdk" Label="@Label" IsOpen="@IsOpenOnly" EnableApproval="@EnableApproval" />
        </RadzenTabsItem>
        <RadzenTabsItem Text="Templating" Icon="@notifications.Templating">
            <GridList OrgName="dotnet" RepoName="templating" Label="@Label" IsOpen="@IsOpenOnly" EnableApproval="@EnableApproval" />
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>
@code {
    [Parameter] public string Label { get; set; }

    [Parameter] public bool IsOpenOnly { get; set; } = true;

    [Parameter] public bool EnableApproval { get; set; } = false;

    IssueNotification notifications = new IssueNotification();

    protected async override Task OnInitializedAsync()
    {
        notifications = await IssuesService.GetNotifications(Label);
        StateHasChanged();   
    }
}
