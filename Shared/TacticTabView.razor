@inject GitHubQueryService IssuesService
@if (Repositories == null)
{
    <p><em>Searching the interwebs...</em></p>
    <RadzenProgressBar Mode="Radzen.ProgressBarMode.Indeterminate" ShowValue="false" Value="100" />
}
else
{
    <RadzenTabs>
        <Tabs>
            @foreach (var repo in Repositories)
            {
            <RadzenTabsItem Text="@repo.Name">
                <div class="form-group">
                    <input class="form-control" type="text" placeholder="Filter..." @bind="Filter" @bind:event="oninput">
                </div>
                <table class="table table-striped">
                    <thead class="thead-light">
                        <tr>
                            <th scope="col" width="90">ID</th>
                            <th scope="col">Title</th>
                            <th scope="col" width="80">Milestone</th>
                        </tr>
                    </thead>
                    <tbody id="dataTable">
                            @foreach (var item in repo.Issues)
                            {
                                if (!IsVisible(item))
                                    continue;

                                <tr>
                                    <th scope="row">
                                        <GitMergeVisual State="@(item.State.StringValue)" />
                                        <a target="_blank" href="@(item.PullRequest.HtmlUrl)">@(item.Number)</a>
                                    </th>
                                    <td>
                                        <a class="gh-issue-title" href="@item.PullRequest.HtmlUrl" target="_blank">@item.Title</a>
                                        <span>
                                            @foreach (var label in item.Labels)
                                            {
                                                <span class="gh-label" style="color:@Colors.GetReadableForeColorAsString(label.Color);background-color:#@label.Color">@label.Name</span>
                                            }
                                        </span>
                                        <div class="gh-details-cell">
                                            @repo.Owner/@repo.Name#@item.Number @item.CreatedAt.Humanize() by @item.User.Login

                                            @if (item.Milestone != null)
                                            {
                                                <span class="ml-2 mr-1 oi oi-signpost text-muted" aria-hidden="true"></span>@item.Milestone.Title
                                            }
                                        </div>
                                    </td>
                                    <td>@item.Milestone?.Title</td>
                                </tr>
                            }
                    </tbody>
                </table>

            </RadzenTabsItem>
            }
        </Tabs>
    </RadzenTabs>
}
@code {
    [Parameter] public string Label { get; set; }

    [Parameter] public bool IsOpenOnly { get; set; } = true;

    [Parameter] public bool EnableApproval { get; set; } = false;

    public List<TriageRepository> Repositories { get; set; }

    public string Filter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Repositories = await IssuesService.GetReposAndIssuesAsync(Label, IsOpenOnly);
    }

    public bool IsVisible(Issue issue)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (issue.Title.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (issue.Milestone != null)
        {
            if (issue.Milestone.Title.Contains(Filter, StringComparison.OrdinalIgnoreCase))
                return true;
        }

        if (issue.Number.ToString().Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
